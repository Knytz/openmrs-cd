pipeline {
  agent any
  tools {
    maven 'Maven 3.5.0' 
    nodejs 'NodeJS 8.6.0'
  }
  stages {
    stage ('Project code checkout') {
      steps {
        git url: repoUrl, branch: branchName
        sh 'find . -mindepth 1 -maxdepth 2 -name pom.xml -exec xmllint --xpath "//*[local-name()=\'project\']/*[local-name()=\'artifactId\']/text()" {} \\; -exec echo \\; > $BUILD_PATH/artifacts_ids.txt'
      }
    }
    stage ('Project build') {
      steps {
        sh 'node /opt/app/src/$JOB_NAME/build.js /tmp/commit_metadata.json'
        sh 'cat $WORKSPACE/build.sh'
        sh '$WORKSPACE/build.sh'
        sh '. /tmp/artifact.env ; mv $WORKSPACE/$buildPath/$filename $WORKSPACE/$destFilename'
      }
    }
    stage ('Artifact deployment') {
      steps {
        sh 'cat $WORKSPACE/deploy.sh'
        sh '$WORKSPACE/deploy.sh $JENKINS_HOME/artifact_repository.env'
      }
    }
    stage ('Post-processing') {
      steps {
        sh 'node /opt/app/src/$JOB_NAME/post-build.js'
        script {
          def buildParamsPath = "${env.BUILD_PATH}/builds_params.json"
          if (fileExists(buildParamsPath)) {
            def params = readJSON file: buildParamsPath
            for (i = 0; i < params.size(); i++) {
              build job: 'pipeline1', wait: false, parameters: \
              [ \
                string(name: 'projectType', value: params[i]['projectType']), \
                string(name: 'repoUrl', value: params[i]['repoUrl']), \
                string(name: 'repoName', value: params[i]['repoName']), \
                string(name: 'branchName', value: params[i]['branchName']) \
              ]
            }
          }
        }
      }
    }
  }
}