"use strict";
/**
 * Main script of the 'start instance' stage.
 *
 */

const fs = require("fs");
const path = require("path");
const _ = require("lodash");

const utils = require("../utils/utils");
const model = require("../utils/model");
const cst = require("../const");
const config = require(cst.CONFIGPATH);
const db = require(cst.DBPATH);

const scripts = require("./scripts");

const currentStage = config.getStartInstanceStatusCode();

//
//  Fetching the instance definition based on the provided UUID
//
var instanceDef = db.getInstanceDefinition(
  process.env[config.varInstanceUuid()]
);
if (_.isEmpty(instanceDef)) {
  throw new Error("Illegal argument: empty or unexisting instance definition.");
}

//
//  Host metadata
//
var ssh = instanceDef.deployment.host.value; // TODO this should be extracted based on the host type
var hostDir = instanceDef.deployment.hostDir;

//
//  Building the script
//
var script = new model.Script();
script.type = "#!/bin/bash";
script.headComment = "# Autogenerated script for the instance start/restart...";
script.body = [];
script.body.push("set -e\n");

var componentsToLink = [];

// 'artifacts'

var finalRestart = false;
if (process.env[config.varArtifactsChanges()] === "true") {
  finalRestart = true;
  componentsToLink.push("artifacts");
}

// 'deployment'
var container = scripts.getDeploymentScripts(instanceDef.deployment.type);

if (process.env[config.varDeploymentChanges()] === "true") {
  script.body.push(scripts.remote(ssh, container.remove(instanceDef.uuid)));
  script.body.push(
    scripts.remote(ssh, container.run(instanceDef.uuid, instanceDef))
  );
  if (!_.isEmpty(instanceDef.deployment.tls)) {
    var tls = instanceDef.deployment.tls;
    if (tls.type === "file") {
      var keyDestPath = "/etc/ssl/";
      script.body.push(
        scripts.remote(
          ssh,
          container.copy(
            instanceDef.uuid,
            tls.value.privateKeyPath,
            keyDestPath + "privkey.pem",
            true
          )
        )
      );
      script.body.push(
        scripts.remote(
          ssh,
          container.copy(
            instanceDef.uuid,
            tls.value.publicCertPath,
            keyDestPath + "cert.pem"
          )
        )
      );
      script.body.push(
        scripts.remote(
          ssh,
          container.copy(
            instanceDef.uuid,
            tls.value.chainCertsPath,
            keyDestPath + "chain.pem"
          )
        )
      );
    } else if (tls.type === "vault") {
      // TODO: Implement fetching TLS certs via Vault
    } else if (tls.type === "letsEncrypt") {
      // TODO: Implement setting up TLS certs using Let's Encrypt
    }
    script.body.push(
      scripts.remote(
        ssh,
        container.exec(
          instanceDef.uuid,
          "chmod 755 /etc/bahmni-installer/update-apache-config.sh\n" +
            "/etc/bahmni-installer/update-apache-config.sh /etc/httpd/conf.d/ssl.conf" +
            " " +
            keyDestPath +
            "privkey.pem" +
            " " +
            keyDestPath +
            "cert.pem" +
            " " +
            keyDestPath +
            "chain.pem"
        )
      )
    );
    script.body.push(
      scripts.remote(
        ssh,
        container.exec(instanceDef.uuid, "service httpd restart")
      )
    );
  }
}

// 'data'

if (process.env[config.varDataChanges()] === "true") {
  instanceDef.data.forEach(function(data) {
    componentsToLink.push("data");

    if (data.type === "instance") {
      // Move MySQL data dir
      var mySQLDatadir = "/mnt/data/mysql_datadir";
      var moveMySQLFolder = "";
      moveMySQLFolder +=
        "chmod 775 /etc/bahmni-installer/move-mysql-datadir.sh\n";
      moveMySQLFolder +=
        "sh -c '/etc/bahmni-installer/move-mysql-datadir.sh /etc/my.cnf " +
        mySQLDatadir +
        "'\n";
      moveMySQLFolder += "chown -R mysql:mysql " + mySQLDatadir;
      script.body.push(
        scripts.remote(ssh, container.exec(instanceDef.uuid, moveMySQLFolder))
      );
      script.body.push(
        scripts.remote(ssh, container.restart(instanceDef.uuid))
      );
    }
    if (
      data.type === "sql" &&
      (data.executionStage === currentStage || _.isEmpty(data.executionStage))
    ) {
      var sql = data.value;
      var randomFolderName = utils
        .random()
        .toString(36)
        .slice(-5);
      var destFolder = "/tmp/" + randomFolderName + "/";
      Object.assign(ssh, { remoteDst: false, remoteSrc: false });
      script.body.push(
        scripts.remote(
          ssh,
          container.exec(instanceDef.uuid, "mkdir -p " + destFolder) +
            "\n" +
            container.copy(instanceDef.uuid, sql.sourceFile, destFolder)
        )
      );

      var sqlCmd = "";
      var waitForMySQL = "";

      if (sql.engine === "mysql") {
        waitForMySQL =
          "until ncat -w30 localhost 3306 --send-only </dev/null; do echo 'Waiting for database connection...'; sleep 5; done";
        var cat = "cat";
        if (path.basename(sql.sourceFile).endsWith(".gz")) {
          cat = "zcat";
        }

        sqlCmd =
          cat +
          " " +
          destFolder +
          path.basename(sql.sourceFile) +
          " | " +
          sql.engine +
          " -uroot -ppassword " +
          sql.database;
      }

      var stopService = "";
      if (sql.database == "openmrs") {
        stopService = "sleep 30s; service " + sql.database + " stop";
      }
      script.body.push(
        scripts.remote(ssh, container.exec(instanceDef.uuid, waitForMySQL))
      );
      script.body.push(
        scripts.remote(ssh, container.exec(instanceDef.uuid, stopService))
      );
      script.body.push(
        scripts.remote(ssh, container.exec(instanceDef.uuid, sqlCmd))
      );
    }
  });
}

// Link mounted folders based on the components to link
script.body.push(
  scripts.remote(
    ssh,
    container.exec(
      instanceDef.uuid,
      scripts.linkComponents(
        _.uniq(componentsToLink),
        instanceDef.deployment.links
      )
    )
  )
);

// Set the Timezone if provided
if (instanceDef.deployment.timezone) {
  script.body.push(
    scripts.remote(
      ssh,
      container.exec(
        instanceDef.uuid,
        scripts.setTimezone(instanceDef.deployment.timezone)
      )
    )
  );
}

// TODO: Remove this block to provide it an 'additionalScript' in the instance definition
// Copy the Bahmni Event Log Service properties file
if (process.env[config.varDataChanges()] === "true") {
  var appPropsFilePath =
    "/opt/bahmni-event-log-service/bahmni-event-log-service/WEB-INF/classes/application.properties";
  script.body.push(
    scripts.remote(
      ssh,
      container.exec(
        instanceDef.uuid,
        "if [ -d /mnt/data/bahmni-event-log-service/ ]; then\n" +
          scripts.rsync(
            {},
            "/mnt/data/bahmni-event-log-service/application.properties",
            appPropsFilePath
          ) +
          "chown -R bahmni:bahmni " +
          appPropsFilePath +
          "\nfi"
      )
    )
  );
  finalRestart = true;
}
var computedScript = scripts.computeAdditionalScripts(
  script.body,
  instanceDef,
  currentStage,
  config,
  process.env
);
script.body = computedScript.script;

finalRestart += computedScript.restartNeeded;

if (finalRestart) {
  script.body.push(scripts.remote(ssh, container.restart(instanceDef.uuid)));
}

script.body = script.body.join(cst.SCRIPT_SEPARATOR);

//
//  Saving the script in the current build dir.
//
fs.writeFileSync(
  path.resolve(config.getBuildDirPath(), config.getStartInstanceScriptName()),
  utils.getScriptAsString(script)
);
fs.chmodSync(
  path.resolve(config.getBuildDirPath(), config.getStartInstanceScriptName()),
  "0755"
);

// Saving the status
fs.writeFileSync(
  path.resolve(config.getBuildDirPath(), config.getStatusFileName()),
  JSON.stringify({ status: currentStage })
);
