var model = require("../../models/model");
var utils = require("../../utils/utils");
var fs = require("fs");

module.exports = {
  getInstance: function() {
    var projectBuild = new model.ProjectBuild();

    // Implement here the Project object methods
    projectBuild.getBuildScript = function() {
      return getBuildScript();
    };
    projectBuild.getArtifact = function(pomPath, metadata) {
      return getArtifact(pomPath, metadata);
    };
    projectBuild.getDeployScript = function(project) {
      return getDeployScript(project);
    };

    return projectBuild;
  }
};

var getBuildScript = function() {
  var buildScript = new model.Script();

  buildScript.type = "#!/bin/bash";
  buildScript.comments =
    "# Autogenerated script to build 'bahmniapps' type of projects";
  buildScript.value = "cd ./ui\n";
  buildScript.value = buildScript.value + "./scripts/package.sh\n";

  return buildScript;
};

var getDeployScript = function(artifact) {
  var deployScript = new model.Script();
  if (typeof artifact == "undefined") {
    console.error(
      "[ERROR] 'artifact' parameter must be provided in order to construct the 'deploy' script"
    );
    process.exit(1);
  }
  deployScript.type = "#!/bin/bash";
  deployScript.comments =
    "# Autogenerated script to deploy 'bahmniapps' type of projects";
  deployScript.value = "nexus_envvars=$1 ; . $nexus_envvars\n";
  deployScript.value =
    deployScript.value +
    "mvn deploy:deploy-file -DgroupId=net.mekomsolutions -DartifactId=" +
    artifact.name +
    " -Dversion=" +
    artifact.version +
    " -Dpackaging=" +
    artifact.extension +
    " -DrepositoryId=${NEXUS_REPO_ID} -Durl=${ARTIFACT_UPLOAD_URL_bahmniapps} -Dfile=" +
    artifact.destFilename +
    "\n";

  return deployScript;
};

var getArtifact = function(pomPath, metadata) {
  var project = new model.Project();
  project.name = "bahmniapps";
  project.groupId = "";
  project.module = "";

  var artifact = new model.Artifact();

  // Version is not managed through npm or maven project. Using the commit id (or branch if present) instead.
  if (
    typeof metadata != "undefined" &&
    metadata != null &&
    metadata.commit != ""
  ) {
    if (metadata.branch) {
      project.version = metadata.branch;
    } else {
      project.version = metadata.commit;
    }
    artifact.filename = project.name + "." + artifact.extension;
    artifact.destFilename =
      artifact.name + "-" + project.version + "." + artifact.extension;
  } else {
    project.version = "";
    artifact.filename = project.name + "." + artifact.extension;
    artifact.destFilename = artifact.filename;
  }

  artifact.project = project;
  artifact.extension = "zip";
  artifact.path = "./ui/target";

  return artifact;
};
