"use strict";

const path = require("path");
const fs = require("fs");
const log = require("npmlog");
const _ = require("lodash");
const XML = require("pixl-xml");

const model = require("../models/model");
const cst = require("../const");
const config = require(cst.CONFIGPATH);
const db = require(cst.DBPATH);

module.exports = {
  /*
   * Generates the default build script for Maven projects.
   * 
   *  'mvn clean install'
   */
  getMavenProjectBuildScript: function(projectType) {
    var script = new model.Script();

    script.type = "#!/bin/bash";
    script.headComment =
      "# Autogenerated script to build projects of type '" +
      projectType +
      "'...";

    script.body = "mvn clean install\n";

    return script;
  },

  /*
   * Generates the default deploy script for Maven projects.
   *
   * @param {string} projectType - Eg. 'openmrsmodule', 'openmrscore', ... etc.
   * @param {string} uploadUrlEnvvarName - Eg. 'ARTIFACT_UPLOAD_URL_openmrsmodule', 'ARTIFACT_UPLOAD_URL_openmrscore', ... etc.
   * 
   *  'mvn clean deploy'
   */
  getMavenProjectDeployScript: function(projectType, uploadUrlEnvvarName) {
    var script = new model.Script();

    script.type = "#!/bin/bash";
    script.headComment =
      "# Autogenerated script to deploy projects of type '" +
      projectType +
      "'...";

    script.body = "nexus_envvars=$1 ; . $nexus_envvars\n";
    script.body += "mvn clean deploy -DskipTests";
    script.body += " ";
    script.body +=
      "-DaltDeploymentRepository=${NEXUS_REPO_ID}::default::${" +
      uploadUrlEnvvarName +
      "}\n";

    return script;
  },

  /*
   * Generates a default 'Artifact' object for a Maven project.
   *  The ouput encapsulates the 'MavenProject' object.
   *
   * @param {Object} pom - A JSON representation of the POM XML.
   * @param {String} buildPath - The relative build path. Eg. './target'
   * @param {String} artifactExtension - The extension of the build output artifact file. Eg. 'omod', 'zip', 'jar'... etc.
   * 
   */
  getMavenProjectArtifact: function(pom, buildPath, artifactExtension) {
    var artifact = new model.Artifact();
    artifact.name = pom.artifactId;
    artifact.version = pom.version;
    artifact.buildPath = buildPath;
    artifact.extension = artifactExtension;
    artifact.filename =
      artifact.name + "-" + artifact.version + "." + artifact.extension;
    artifact.destFilename = artifact.filename;

    // encapsulating the Maven project
    var mavenProject = new model.MavenProject();
    mavenProject.groupId = pom.groupId;
    mavenProject.artifactId = pom.artifactId;
    mavenProject.version = pom.version;
    mavenProject.packaging = artifactExtension;
    artifact.mavenProject = mavenProject;

    return artifact;
  },

  /*
   * Looks for projects (distributions) impacted by a change in the currently built artifact.
   * Then saves the build parameters of the impacted projects to rebuild them as downstream jobs.
   *
   * @param {String} groupId - The Maven group ID of the currently built project.
   * @param {Array} artifactsIds - All the artifacts IDs (itself and submodules) that belong to the currently built project.
   * @param {String} artifactExtension - The Maven version of the currently built project.
   * 
   */
  mavenPostBuildActions: function(groupId, artifactsIds, version) {
    var allDeps = db.getAllArtifactDependencies();
    var impactedArtifacts = [];

    artifactsIds.forEach(function(artifactId) {
      var project = new model.MavenProject(groupId, artifactId, version, "zzz");
      allDeps.forEach(function(deps) {
        if (deps.dependencies.indexOf(project.asArtifactKey()) > -1) {
          impactedArtifacts.push(deps.artifactKey);
        }
      });
    });
    impactedArtifacts = _.uniq(impactedArtifacts);

    var params = [];
    impactedArtifacts.forEach(function(artifactKey) {
      var buildParams = db.getArtifactBuildParams(artifactKey);
      params.push(buildParams["buildParams"]);
    });

    fs.writeFileSync(
      config.getDownstreamBuildParamsJsonPath(),
      JSON.stringify(params)
    );
  }
};
